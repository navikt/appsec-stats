package no.nav.security

import org.junit.jupiter.api.Test
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertTrue

class VulnerabilityCombinerTest {

    private val combiner = VulnerabilityCombiner()

    @Test
    fun `should combine vulnerabilities from both sources without duplicates`() {
        // Given
        val naisRepositories = setOf(
            NaisRepository(
                name = "test-repo",
                vulnerabilities = setOf(
                    NaisVulnerability(
                        identifier = "CVE-2024-1234",
                        severity = "HIGH",
                        suppressed = false
                    ),
                    NaisVulnerability(
                        identifier = "CVE-2024-5678",
                        severity = "MEDIUM",
                        suppressed = false
                    )
                )
            )
        )

        val githubVulns = listOf(
            GithubRepoVulnerabilities(
                repository = "test-repo",
                vulnerabilities = listOf(
                    GithubRepoVulnerabilities.GithubVulnerability(
                        severity = "CRITICAL",
                        identifier = listOf(
                            GithubRepoVulnerabilities.GithubVulnerability.GithubVulnerabilityIdentifier(
                                value = "CVE-2024-9999",
                                type = "CVE"
                            )
                        )
                    )
                )
            )
        )

        // When
        val result = combiner.combineVulnerabilities(naisRepositories, githubVulns)

        // Then
        assertEquals(1, result.size)
        assertEquals("test-repo", result[0].githubRepository)
        assertEquals(3, result[0].vulnerabilities) // 2 from Nais + 1 from GitHub
    }

    @Test
    fun `should deduplicate vulnerabilities with matching identifiers`() {
        // Given - Same CVE in both sources
        val naisRepositories = setOf(
            NaisRepository(
                name = "test-repo",
                vulnerabilities = setOf(
                    NaisVulnerability(
                        identifier = "CVE-2024-1234",
                        severity = "HIGH",
                        suppressed = false
                    )
                )
            )
        )

        val githubVulns = listOf(
            GithubRepoVulnerabilities(
                repository = "test-repo",
                vulnerabilities = listOf(
                    GithubRepoVulnerabilities.GithubVulnerability(
                        severity = "HIGH",
                        identifier = listOf(
                            GithubRepoVulnerabilities.GithubVulnerability.GithubVulnerabilityIdentifier(
                                value = "CVE-2024-1234",
                                type = "CVE"
                            ),
                            GithubRepoVulnerabilities.GithubVulnerability.GithubVulnerabilityIdentifier(
                                value = "GHSA-xxxx-yyyy-zzzz",
                                type = "GHSA"
                            )
                        )
                    )
                )
            )
        )

        // When
        val result = combiner.combineVulnerabilities(naisRepositories, githubVulns)

        // Then
        assertEquals(1, result.size)
        assertEquals("test-repo", result[0].githubRepository)
        assertEquals(1, result[0].vulnerabilities) // Should be deduplicated to 1
    }

    @Test
    fun `should handle multiple identifiers from GitHub matching single identifier from Nais`() {
        // Given
        val naisRepositories = setOf(
            NaisRepository(
                name = "test-repo",
                vulnerabilities = setOf(
                    NaisVulnerability(
                        identifier = "GHSA-xxxx-yyyy-zzzz",
                        severity = "CRITICAL",
                        suppressed = false
                    )
                )
            )
        )

        val githubVulns = listOf(
            GithubRepoVulnerabilities(
                repository = "test-repo",
                vulnerabilities = listOf(
                    GithubRepoVulnerabilities.GithubVulnerability(
                        severity = "CRITICAL",
                        identifier = listOf(
                            GithubRepoVulnerabilities.GithubVulnerability.GithubVulnerabilityIdentifier(
                                value = "CVE-2024-9999",
                                type = "CVE"
                            ),
                            GithubRepoVulnerabilities.GithubVulnerability.GithubVulnerabilityIdentifier(
                                value = "GHSA-xxxx-yyyy-zzzz",
                                type = "GHSA"
                            )
                        )
                    )
                )
            )
        )

        // When
        val result = combiner.combineVulnerabilities(naisRepositories, githubVulns)

        // Then
        assertEquals(1, result.size)
        assertEquals("test-repo", result[0].githubRepository)
        assertEquals(1, result[0].vulnerabilities) // Should be deduplicated due to matching GHSA
    }

    @Test
    fun `should filter out suppressed vulnerabilities`() {
        // Given
        val naisRepositories = setOf(
            NaisRepository(
                name = "test-repo",
                vulnerabilities = setOf(
                    NaisVulnerability(
                        identifier = "CVE-2024-1234",
                        severity = "HIGH",
                        suppressed = true // This one is suppressed
                    ),
                    NaisVulnerability(
                        identifier = "CVE-2024-5678",
                        severity = "MEDIUM",
                        suppressed = false
                    )
                )
            )
        )

        val githubVulns = listOf(
            GithubRepoVulnerabilities(
                repository = "test-repo",
                vulnerabilities = listOf(
                    GithubRepoVulnerabilities.GithubVulnerability(
                        severity = "HIGH",
                        identifier = listOf(
                            GithubRepoVulnerabilities.GithubVulnerability.GithubVulnerabilityIdentifier(
                                value = "CVE-2024-1234",
                                type = "CVE"
                            )
                        )
                    )
                )
            )
        )

        // When
        val result = combiner.combineVulnerabilities(naisRepositories, githubVulns)

        // Then
        assertEquals(1, result.size)
        assertEquals("test-repo", result[0].githubRepository)
        assertEquals(1, result[0].vulnerabilities) // Only the non-suppressed MEDIUM vulnerability should remain
    }

    @Test
    fun `should only deduplicate vulnerabilities with same severity`() {
        // Given - Same CVE but different severities
        val naisRepositories = setOf(
            NaisRepository(
                name = "test-repo",
                vulnerabilities = setOf(
                    NaisVulnerability(
                        identifier = "CVE-2024-1234",
                        severity = "HIGH",
                        suppressed = false
                    )
                )
            )
        )

        val githubVulns = listOf(
            GithubRepoVulnerabilities(
                repository = "test-repo",
                vulnerabilities = listOf(
                    GithubRepoVulnerabilities.GithubVulnerability(
                        severity = "MEDIUM", // Different severity
                        identifier = listOf(
                            GithubRepoVulnerabilities.GithubVulnerability.GithubVulnerabilityIdentifier(
                                value = "CVE-2024-1234",
                                type = "CVE"
                            )
                        )
                    )
                )
            )
        )

        // When
        val result = combiner.combineVulnerabilities(naisRepositories, githubVulns)

        // Then
        assertEquals(1, result.size)
        assertEquals("test-repo", result[0].githubRepository)
        assertEquals(2, result[0].vulnerabilities) // Should keep both due to different severities
    }

    @Test
    fun `should handle repositories with no vulnerabilities`() {
        // Given
        val naisRepositories = setOf(
            NaisRepository(
                name = "empty-repo",
                vulnerabilities = emptySet()
            )
        )

        val githubVulns = listOf(
            GithubRepoVulnerabilities(
                repository = "empty-repo",
                vulnerabilities = emptyList()
            )
        )

        // When
        val result = combiner.combineVulnerabilities(naisRepositories, githubVulns)

        // Then
        assertEquals(1, result.size)
        assertEquals("empty-repo", result[0].githubRepository)
        assertEquals(0, result[0].vulnerabilities)
    }

    @Test
    fun `should handle repositories that exist only in one source`() {
        // Given
        val naisRepositories = setOf(
            NaisRepository(
                name = "nais-only-repo",
                vulnerabilities = setOf(
                    NaisVulnerability(
                        identifier = "CVE-2024-1111",
                        severity = "LOW",
                        suppressed = false
                    )
                )
            )
        )

        val githubVulns = listOf(
            GithubRepoVulnerabilities(
                repository = "github-only-repo",
                vulnerabilities = listOf(
                    GithubRepoVulnerabilities.GithubVulnerability(
                        severity = "HIGH",
                        identifier = listOf(
                            GithubRepoVulnerabilities.GithubVulnerability.GithubVulnerabilityIdentifier(
                                value = "CVE-2024-2222",
                                type = "CVE"
                            )
                        )
                    )
                )
            )
        )

        // When
        val result = combiner.combineVulnerabilities(naisRepositories, githubVulns)

        // Then
        assertEquals(2, result.size)

        val naisOnlyRepo = result.find { it.githubRepository == "nais-only-repo" }!!
        assertEquals(1, naisOnlyRepo.vulnerabilities)

        val githubOnlyRepo = result.find { it.githubRepository == "github-only-repo" }!!
        assertEquals(1, githubOnlyRepo.vulnerabilities)
    }

    @Test
    fun `should handle complex scenario with multiple repos and mixed vulnerabilities`() {
        // Given
        val naisRepositories = setOf(
            NaisRepository(
                name = "repo1",
                vulnerabilities = setOf(
                    NaisVulnerability(
                        identifier = "CVE-2024-1111",
                        severity = "HIGH",
                        suppressed = false
                    ),
                    NaisVulnerability(
                        identifier = "CVE-2024-2222",
                        severity = "MEDIUM",
                        suppressed = true // Suppressed
                    )
                )
            ),
            NaisRepository(
                name = "repo2",
                vulnerabilities = setOf(
                    NaisVulnerability(
                        identifier = "CVE-2024-3333",
                        severity = "LOW",
                        suppressed = false
                    )
                )
            )
        )

        val githubVulns = listOf(
            GithubRepoVulnerabilities(
                repository = "repo1",
                vulnerabilities = listOf(
                    GithubRepoVulnerabilities.GithubVulnerability(
                        severity = "HIGH",
                        identifier = listOf(
                            GithubRepoVulnerabilities.GithubVulnerability.GithubVulnerabilityIdentifier(
                                value = "CVE-2024-1111", // Duplicate
                                type = "CVE"
                            )
                        )
                    ),
                    GithubRepoVulnerabilities.GithubVulnerability(
                        severity = "MEDIUM",
                        identifier = listOf(
                            GithubRepoVulnerabilities.GithubVulnerability.GithubVulnerabilityIdentifier(
                                value = "CVE-2024-2222", // Duplicate but suppressed in Nais
                                type = "CVE"
                            )
                        )
                    ),
                    GithubRepoVulnerabilities.GithubVulnerability(
                        severity = "CRITICAL",
                        identifier = listOf(
                            GithubRepoVulnerabilities.GithubVulnerability.GithubVulnerabilityIdentifier(
                                value = "CVE-2024-4444", // Unique to GitHub
                                type = "CVE"
                            )
                        )
                    )
                )
            ),
            GithubRepoVulnerabilities(
                repository = "repo3", // Only in GitHub
                vulnerabilities = listOf(
                    GithubRepoVulnerabilities.GithubVulnerability(
                        severity = "HIGH",
                        identifier = listOf(
                            GithubRepoVulnerabilities.GithubVulnerability.GithubVulnerabilityIdentifier(
                                value = "CVE-2024-5555",
                                type = "CVE"
                            )
                        )
                    )
                )
            )
        )

        // When
        val result = combiner.combineVulnerabilities(naisRepositories, githubVulns)

        // Then
        assertEquals(3, result.size)

        val repo1 = result.find { it.githubRepository == "repo1" }!!
        assertEquals(2, repo1.vulnerabilities) // HIGH (deduplicated) + CRITICAL (CVE-2024-2222 filtered due to suppression)

        val repo2 = result.find { it.githubRepository == "repo2" }!!
        assertEquals(1, repo2.vulnerabilities) // LOW from Nais only

        val repo3 = result.find { it.githubRepository == "repo3" }!!
        assertEquals(1, repo3.vulnerabilities) // HIGH from GitHub only
    }

    @Test
    fun `should handle empty input`() {
        // Given
        val naisRepositories = emptySet<NaisRepository>()
        val githubVulns = emptyList<GithubRepoVulnerabilities>()

        // When
        val result = combiner.combineVulnerabilities(naisRepositories, githubVulns)

        // Then
        assertTrue(result.isEmpty())
    }
}
