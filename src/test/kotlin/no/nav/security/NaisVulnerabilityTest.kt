package no.nav.security

import io.ktor.client.*
import io.ktor.client.engine.mock.*
import io.ktor.client.plugins.contentnegotiation.*
import io.ktor.http.*
import io.ktor.serialization.kotlinx.json.*
import io.ktor.utils.io.*
import kotlinx.coroutines.runBlocking
import kotlinx.serialization.json.Json
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertTrue
import org.junit.jupiter.api.Assertions.assertFalse

class NaisVulnerabilityTest {

    private fun createMockHttpClient(responses: List<String>): HttpClient {
        var responseIndex = 0
        return HttpClient(MockEngine) {
            install(ContentNegotiation) {
                json(Json {
                    ignoreUnknownKeys = true
                    explicitNulls = false
                })
            }
            engine {
                addHandler { request ->
                    if (responseIndex < responses.size) {
                        val response = responses[responseIndex]
                        responseIndex++
                        respond(
                            content = ByteReadChannel(response),
                            status = HttpStatusCode.OK,
                            headers = headersOf(HttpHeaders.ContentType, "application/json")
                        )
                    } else {
                        error("No more mock responses available")
                    }
                }
            }
        }
    }

    @Test
    fun `should fetch vulnerabilities from single team response`() = runBlocking {
        val mockResponse = """
        {
          "data": {
            "teams": {
              "pageInfo": {
                "hasNextPage": false,
                "startCursor": "42E5H9",
                "endCursor": "42E5HA"
              },
              "nodes": [
                {
                  "slug": "team-alpha",
                  "workloads": {
                    "pageInfo": {
                      "hasNextPage": false,
                      "startCursor": "42E5H9",
                      "endCursor": "42E5H9"
                    },
                    "nodes": [
                      {
                        "__typename": "Application",
                        "deployments": {
                          "nodes": [
                            {
                              "repository": "navikt/test-app"
                            }
                          ]
                        },
                        "name": "test-app",
                        "image": {
                          "vulnerabilities": {
                            "pageInfo": {
                              "hasNextPage": false,
                              "endCursor": null
                            },
                            "nodes": [
                              {
                                "identifier": "CVE-2024-12345",
                                "severity": "CRITICAL",
                                "analysisTrail": {
                                  "suppressed": false
                                }
                              },
                              {
                                "identifier": "CVE-2024-67890",
                                "severity": "HIGH",
                                "analysisTrail": {
                                  "suppressed": true
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
        """.trimIndent()

        val mockClient = createMockHttpClient(listOf(mockResponse))
        val naisApi = NaisApi(mockClient)

        val result = naisApi.repoVulnerabilities()

        assertEquals(1, result.size)
        val repo = result.first()
        assertEquals("test-app", repo.name)
        assertEquals(2, repo.vulnerabilities.size)

        val criticalVuln = repo.vulnerabilities.find { it.identifier == "CVE-2024-12345" }!!
        assertEquals("CRITICAL", criticalVuln.severity)
        assertFalse(criticalVuln.suppressed)

        val highVuln = repo.vulnerabilities.find { it.identifier == "CVE-2024-67890" }!!
        assertEquals("HIGH", highVuln.severity)
        assertTrue(highVuln.suppressed)
    }

    @Test
    fun `should handle vulnerability pagination correctly`() = runBlocking {
        val firstResponse = """
        {
          "data": {
            "teams": {
              "pageInfo": {
                "hasNextPage": false,
                "startCursor": "42E5H9",
                "endCursor": "42E5HA"
              },
              "nodes": [
                {
                  "slug": "team-vulns",
                  "workloads": {
                    "pageInfo": {
                      "hasNextPage": false,
                      "startCursor": "42E5H9",
                      "endCursor": "42E5H9"
                    },
                    "nodes": [
                      {
                        "__typename": "Application",
                        "deployments": {
                          "nodes": [
                            {
                              "repository": "navikt/vuln-heavy-app"
                            }
                          ]
                        },
                        "name": "vuln-heavy-app",
                        "image": {
                          "vulnerabilities": {
                            "pageInfo": {
                              "hasNextPage": true,
                              "endCursor": "vuln-page-1-cursor"
                            },
                            "nodes": [
                              {
                                "identifier": "CVE-2024-11111",
                                "severity": "CRITICAL",
                                "analysisTrail": {
                                  "suppressed": false
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
        """.trimIndent()

        val secondResponse = """
        {
          "data": {
            "teams": {
              "pageInfo": {
                "hasNextPage": false,
                "startCursor": "42E5H9",
                "endCursor": "42E5HA"
              },
              "nodes": [
                {
                  "slug": "team-vulns",
                  "workloads": {
                    "pageInfo": {
                      "hasNextPage": false,
                      "startCursor": "42E5H9",
                      "endCursor": "42E5H9"
                    },
                    "nodes": [
                      {
                        "__typename": "Application",
                        "deployments": {
                          "nodes": [
                            {
                              "repository": "navikt/vuln-heavy-app"
                            }
                          ]
                        },
                        "name": "vuln-heavy-app",
                        "image": {
                          "vulnerabilities": {
                            "pageInfo": {
                              "hasNextPage": false,
                              "endCursor": null
                            },
                            "nodes": [
                              {
                                "identifier": "CVE-2024-22222",
                                "severity": "HIGH",
                                "analysisTrail": {
                                  "suppressed": false
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
        """.trimIndent()

        val mockClient = createMockHttpClient(listOf(firstResponse, secondResponse))
        val naisApi = NaisApi(mockClient)

        val result = naisApi.repoVulnerabilities()

        assertEquals(1, result.size)
        val repo = result.first()
        assertEquals("vuln-heavy-app", repo.name)
        assertEquals(2, repo.vulnerabilities.size) // Combined from both pages

        assertTrue(repo.vulnerabilities.any { it.identifier == "CVE-2024-11111" && it.severity == "CRITICAL" })
        assertTrue(repo.vulnerabilities.any { it.identifier == "CVE-2024-22222" && it.severity == "HIGH" })
    }

    @Test
    fun `should handle workload pagination correctly`() = runBlocking {
        val firstResponse = """
        {
          "data": {
            "teams": {
              "pageInfo": {
                "hasNextPage": false,
                "startCursor": "42E5H9",
                "endCursor": "42E5HA"
              },
              "nodes": [
                {
                  "slug": "team-workloads",
                  "workloads": {
                    "pageInfo": {
                      "hasNextPage": true,
                      "startCursor": "42E5H9",
                      "endCursor": "workload-page-1-cursor"
                    },
                    "nodes": [
                      {
                        "__typename": "Application",
                        "deployments": {
                          "nodes": [
                            {
                              "repository": "navikt/app-1"
                            }
                          ]
                        },
                        "name": "app-1",
                        "image": {
                          "vulnerabilities": {
                            "pageInfo": {
                              "hasNextPage": false,
                              "endCursor": null
                            },
                            "nodes": [
                              {
                                "identifier": "CVE-2024-app1",
                                "severity": "MEDIUM",
                                "analysisTrail": {
                                  "suppressed": false
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
        """.trimIndent()

        val secondResponse = """
        {
          "data": {
            "teams": {
              "pageInfo": {
                "hasNextPage": false,
                "startCursor": "42E5H9",
                "endCursor": "42E5HA"
              },
              "nodes": [
                {
                  "slug": "team-workloads",
                  "workloads": {
                    "pageInfo": {
                      "hasNextPage": false,
                      "startCursor": "workload-page-1-cursor",
                      "endCursor": "workload-page-2-cursor"
                    },
                    "nodes": [
                      {
                        "__typename": "Job",
                        "deployments": {
                          "nodes": [
                            {
                              "repository": "navikt/job-2"
                            }
                          ]
                        },
                        "name": "job-2",
                        "image": {
                          "vulnerabilities": {
                            "pageInfo": {
                              "hasNextPage": false,
                              "endCursor": null
                            },
                            "nodes": [
                              {
                                "identifier": "CVE-2024-job2",
                                "severity": "LOW",
                                "analysisTrail": {
                                  "suppressed": true
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
        """.trimIndent()

        val mockClient = createMockHttpClient(listOf(firstResponse, secondResponse))
        val naisApi = NaisApi(mockClient)

        val result = naisApi.repoVulnerabilities()

        assertEquals(2, result.size)

        val app1 = result.find { it.name == "app-1" }!!
        assertEquals(1, app1.vulnerabilities.size)
        assertEquals("CVE-2024-app1", app1.vulnerabilities.first().identifier)
        assertEquals("MEDIUM", app1.vulnerabilities.first().severity)
        assertFalse(app1.vulnerabilities.first().suppressed)

        val job2 = result.find { it.name == "job-2" }!!
        assertEquals(1, job2.vulnerabilities.size)
        assertEquals("CVE-2024-job2", job2.vulnerabilities.first().identifier)
        assertEquals("LOW", job2.vulnerabilities.first().severity)
        assertTrue(job2.vulnerabilities.first().suppressed)
    }

    @Test
    fun `should handle team pagination correctly`() = runBlocking {
        val firstResponse = """
        {
          "data": {
            "teams": {
              "pageInfo": {
                "hasNextPage": true,
                "startCursor": "42E5H9",
                "endCursor": "team-page-1-cursor"
              },
              "nodes": [
                {
                  "slug": "team-page-1",
                  "workloads": {
                    "pageInfo": {
                      "hasNextPage": false,
                      "startCursor": "42E5H9",
                      "endCursor": "42E5H9"
                    },
                    "nodes": [
                      {
                        "__typename": "Application",
                        "deployments": {
                          "nodes": [
                            {
                              "repository": "navikt/team1-app"
                            }
                          ]
                        },
                        "name": "team1-app",
                        "image": {
                          "vulnerabilities": {
                            "pageInfo": {
                              "hasNextPage": false,
                              "endCursor": null
                            },
                            "nodes": [
                              {
                                "identifier": "CVE-2024-team1",
                                "severity": "HIGH",
                                "analysisTrail": {
                                  "suppressed": false
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
        """.trimIndent()

        val secondResponse = """
        {
          "data": {
            "teams": {
              "pageInfo": {
                "hasNextPage": false,
                "startCursor": "team-page-1-cursor",
                "endCursor": "team-page-2-cursor"
              },
              "nodes": [
                {
                  "slug": "team-page-2",
                  "workloads": {
                    "pageInfo": {
                      "hasNextPage": false,
                      "startCursor": "42E5H9",
                      "endCursor": "42E5H9"
                    },
                    "nodes": [
                      {
                        "__typename": "Application",
                        "deployments": {
                          "nodes": [
                            {
                              "repository": "navikt/team2-app"
                            }
                          ]
                        },
                        "name": "team2-app",
                        "image": {
                          "vulnerabilities": {
                            "pageInfo": {
                              "hasNextPage": false,
                              "endCursor": null
                            },
                            "nodes": [
                              {
                                "identifier": "CVE-2024-team2",
                                "severity": "CRITICAL",
                                "analysisTrail": {
                                  "suppressed": true
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
        """.trimIndent()

        val mockClient = createMockHttpClient(listOf(firstResponse, secondResponse))
        val naisApi = NaisApi(mockClient)

        val result = naisApi.repoVulnerabilities()

        assertEquals(2, result.size)

        val team1App = result.find { it.name == "team1-app" }!!
        assertEquals("CVE-2024-team1", team1App.vulnerabilities.first().identifier)
        assertEquals("HIGH", team1App.vulnerabilities.first().severity)
        assertFalse(team1App.vulnerabilities.first().suppressed)

        val team2App = result.find { it.name == "team2-app" }!!
        assertEquals("CVE-2024-team2", team2App.vulnerabilities.first().identifier)
        assertEquals("CRITICAL", team2App.vulnerabilities.first().severity)
        assertTrue(team2App.vulnerabilities.first().suppressed)
    }

    @Test
    fun `should handle mixed Application and Job workloads`() = runBlocking {
        val mockResponse = """
        {
          "data": {
            "teams": {
              "pageInfo": {
                "hasNextPage": false,
                "startCursor": "42E5H9",
                "endCursor": "42E5HA"
              },
              "nodes": [
                {
                  "slug": "mixed-team",
                  "workloads": {
                    "pageInfo": {
                      "hasNextPage": false,
                      "startCursor": "42E5H9",
                      "endCursor": "42E5H9"
                    },
                    "nodes": [
                      {
                        "__typename": "Application",
                        "deployments": {
                          "nodes": [
                            {
                              "repository": "navikt/web-app"
                            }
                          ]
                        },
                        "name": "web-app",
                        "image": {
                          "vulnerabilities": {
                            "pageInfo": {
                              "hasNextPage": false,
                              "endCursor": null
                            },
                            "nodes": [
                              {
                                "identifier": "CVE-2024-webapp",
                                "severity": "HIGH",
                                "analysisTrail": {
                                  "suppressed": false
                                }
                              }
                            ]
                          }
                        }
                      },
                      {
                        "__typename": "Job",
                        "deployments": {
                          "nodes": [
                            {
                              "repository": "navikt/batch-job"
                            }
                          ]
                        },
                        "name": "batch-job",
                        "image": {
                          "vulnerabilities": {
                            "pageInfo": {
                              "hasNextPage": false,
                              "endCursor": null
                            },
                            "nodes": [
                              {
                                "identifier": "CVE-2024-batchjob",
                                "severity": "MEDIUM",
                                "analysisTrail": {
                                  "suppressed": true
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
        """.trimIndent()

        val mockClient = createMockHttpClient(listOf(mockResponse))
        val naisApi = NaisApi(mockClient)

        val result = naisApi.repoVulnerabilities()

        assertEquals(2, result.size)

        val webApp = result.find { it.name == "web-app" }!!
        assertEquals("CVE-2024-webapp", webApp.vulnerabilities.first().identifier)
        assertEquals("HIGH", webApp.vulnerabilities.first().severity)
        assertFalse(webApp.vulnerabilities.first().suppressed)

        val batchJob = result.find { it.name == "batch-job" }!!
        assertEquals("CVE-2024-batchjob", batchJob.vulnerabilities.first().identifier)
        assertEquals("MEDIUM", batchJob.vulnerabilities.first().severity)
        assertTrue(batchJob.vulnerabilities.first().suppressed)
    }

    @Test
    fun `should skip workloads without vulnerabilities`() = runBlocking {
        val mockResponse = """
        {
          "data": {
            "teams": {
              "pageInfo": {
                "hasNextPage": false,
                "startCursor": "42E5H9",
                "endCursor": "42E5HA"
              },
              "nodes": [
                {
                  "slug": "mixed-vulns-team",
                  "workloads": {
                    "pageInfo": {
                      "hasNextPage": false,
                      "startCursor": "42E5H9",
                      "endCursor": "42E5H9"
                    },
                    "nodes": [
                      {
                        "__typename": "Application",
                        "deployments": {
                          "nodes": [
                            {
                              "repository": "navikt/secure-app"
                            }
                          ]
                        },
                        "name": "secure-app",
                        "image": {
                          "vulnerabilities": {
                            "pageInfo": {
                              "hasNextPage": false,
                              "endCursor": null
                            },
                            "nodes": []
                          }
                        }
                      },
                      {
                        "__typename": "Application",
                        "deployments": {
                          "nodes": [
                            {
                              "repository": "navikt/vulnerable-app"
                            }
                          ]
                        },
                        "name": "vulnerable-app",
                        "image": {
                          "vulnerabilities": {
                            "pageInfo": {
                              "hasNextPage": false,
                              "endCursor": null
                            },
                            "nodes": [
                              {
                                "identifier": "CVE-2024-vuln",
                                "severity": "CRITICAL",
                                "analysisTrail": {
                                  "suppressed": false
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
        """.trimIndent()

        val mockClient = createMockHttpClient(listOf(mockResponse))
        val naisApi = NaisApi(mockClient)

        val result = naisApi.repoVulnerabilities()

        assertEquals(1, result.size) // Only vulnerable-app should be included
        val vulnerableApp = result.first()
        assertEquals("vulnerable-app", vulnerableApp.name)
        assertEquals("CVE-2024-vuln", vulnerableApp.vulnerabilities.first().identifier)
        assertEquals("CRITICAL", vulnerableApp.vulnerabilities.first().severity)
    }

    @Test
    fun `should handle empty response correctly`() = runBlocking {
        val mockResponse = """
        {
          "data": {
            "teams": {
              "pageInfo": {
                "hasNextPage": false,
                "startCursor": null,
                "endCursor": null
              },
              "nodes": []
            }
          }
        }
        """.trimIndent()

        val mockClient = createMockHttpClient(listOf(mockResponse))
        val naisApi = NaisApi(mockClient)

        val result = naisApi.repoVulnerabilities()

        assertTrue(result.isEmpty())
    }

    @Test
    fun `should handle complex three-level pagination scenario`() = runBlocking {
        // This test simulates a complex scenario with pagination at all three levels
        val firstResponse = """
        {
          "data": {
            "teams": {
              "pageInfo": {
                "hasNextPage": false,
                "startCursor": "team-start",
                "endCursor": "team-cursor-1"
              },
              "nodes": [
                {
                  "slug": "complex-team-1",
                  "workloads": {
                    "pageInfo": {
                      "hasNextPage": false,
                      "startCursor": "workload-start",
                      "endCursor": "workload-cursor-1"
                    },
                    "nodes": [
                      {
                        "__typename": "Application",
                        "deployments": {
                          "nodes": [
                            {
                              "repository": "navikt/complex-app-1"
                            }
                          ]
                        },
                        "name": "complex-app-1",
                        "image": {
                          "vulnerabilities": {
                            "pageInfo": {
                              "hasNextPage": true,
                              "endCursor": "vuln-cursor-1"
                            },
                            "nodes": [
                              {
                                "identifier": "CVE-2024-complex-1",
                                "severity": "HIGH",
                                "analysisTrail": {
                                  "suppressed": false
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
        """.trimIndent()

        // Second response - more vulnerabilities for the same app (vulnerability pagination only)
        val secondResponse = """
        {
          "data": {
            "teams": {
              "pageInfo": {
                "hasNextPage": false,
                "startCursor": "team-start",
                "endCursor": "team-cursor-1"
              },
              "nodes": [
                {
                  "slug": "complex-team-1",
                  "workloads": {
                    "pageInfo": {
                      "hasNextPage": false,
                      "startCursor": "workload-start",
                      "endCursor": "workload-cursor-1"
                    },
                    "nodes": [
                      {
                        "__typename": "Application",
                        "deployments": {
                          "nodes": [
                            {
                              "repository": "navikt/complex-app-1"
                            }
                          ]
                        },
                        "name": "complex-app-1",
                        "image": {
                          "vulnerabilities": {
                            "pageInfo": {
                              "hasNextPage": false,
                              "endCursor": null
                            },
                            "nodes": [
                              {
                                "identifier": "CVE-2024-complex-2",
                                "severity": "CRITICAL",
                                "analysisTrail": {
                                  "suppressed": false
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
        """.trimIndent()

        val mockClient = createMockHttpClient(listOf(firstResponse, secondResponse))
        val naisApi = NaisApi(mockClient)

        val result = naisApi.repoVulnerabilities()

        assertEquals(1, result.size)
        val complexApp = result.first()
        assertEquals("complex-app-1", complexApp.name)
        assertEquals(2, complexApp.vulnerabilities.size) // Both vulnerabilities from paginated response

        assertTrue(complexApp.vulnerabilities.any { it.identifier == "CVE-2024-complex-1" && it.severity == "HIGH" })
        assertTrue(complexApp.vulnerabilities.any { it.identifier == "CVE-2024-complex-2" && it.severity == "CRITICAL" })
    }
}
